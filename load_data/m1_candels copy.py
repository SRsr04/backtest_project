import os
import random
from math import ceil
from datetime import datetime, timedelta
from time import sleep

import pytz
import pandas as pd
from okx.MarketData import MarketAPI

# ======================
# –ö–æ–Ω—Ñ—ñ–≥
# ======================
inst_id = "BTC-USDT-SWAP"
tf = "1m"

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ OKX: 300
limit = 300

# –†—ñ–≤–Ω–æ ~5 —Ä–æ–∫—ñ–≤ (–≤—Ä–∞—Ö–æ–≤—É–π –≤–∏—Å–æ–∫–æ—Å–Ω–∏–π —Ä—ñ–∫; 1826 = —Å—Ç—Ä–æ–≥–æ 5 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö)
DAYS_TO_FETCH = 1826

output_file = "btc/m1_candels.csv"

# –†–µ–π—Ç-–ª—ñ–º—ñ—Ç/—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
SAFE_SLEEP_EVERY = 50     # –ø–∞—É–∑–∞ –∫–æ–∂–Ω—ñ N –∑–∞–ø–∏—Ç—ñ–≤ (–¥–ª—è ¬´–ø—ñ–¥–¥–∏—Ö—É¬ª)
SAFE_SLEEP_SEC = 2
REFRESH_CLIENT_EVERY = 1000
RETRY_MAX = 6
RETRY_BASE = 2            # —Å–µ–∫ (–µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–π –±–µ–∫–æ—Ñ)
RETRY_CAP = 30            # –º–∞–∫—Å –ø–∞—É–∑–∞ –º—ñ–∂ —Ä–µ—Ç—Ä—ñ

# ======================
# –£—Ç–∏–ª—ñ—Ç–∏
# ======================
def from_str_ms(ms_str: str) -> datetime:
    return datetime.fromtimestamp(int(ms_str) / 1000, tz=pytz.UTC)

def get_kyiv_tz():
    try:
        from zoneinfo import ZoneInfo
        return ZoneInfo("Europe/Kyiv")
    except ImportError:
        return pytz.timezone("Europe/Kyiv")

def ensure_dir(path: str):
    d = os.path.dirname(path)
    if d:
        os.makedirs(d, exist_ok=True)

def fetch_with_retry(cl, **kwargs):
    """–í–∏–∫–ª–∏–∫ OKX –∑ —Ä–µ—Ç—Ä—ñ —Ç–∞ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–º –±–µ–∫–æ—Ñ–æ–º."""
    for attempt in range(1, RETRY_MAX + 1):
        try:
            r = cl.get_history_candlesticks(**kwargs)
            return r.get("data", [])
        except Exception as e:
            delay = min(RETRY_BASE * (2 ** (attempt - 1)), RETRY_CAP)
            delay += random.uniform(0, 0.5 * delay)  # –¥–∂–∏—Ç—Ç–µ—Ä
            print(f"[WARN] {e}. retry {attempt}/{RETRY_MAX} in {delay:.1f}s...")
            sleep(delay)
            # –ù–∞ –ø–∞—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±–∞—Ö ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç
            if attempt % 2 == 0:
                try:
                    cl = MarketAPI(flag="0", debug=False)
                    print("[INFO] –ö–ª—ñ—î–Ω—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ.")
                except Exception as e2:
                    print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç: {e2}")
    raise RuntimeError("–í–∏—á–µ—Ä–ø–∞–Ω–æ —Ä–µ—Ç—Ä—ñ –¥–ª—è get_history_candlesticks")

# ======================
# –û—Å–Ω–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç (FORWARD)
# ======================
def main():
    print(f"*** OKX {tf} Candles ‚Äì Last {DAYS_TO_FETCH // 365} Years for {inst_id} ***")

    kyiv_tz = get_kyiv_tz()
    min_dt = datetime.now(tz=pytz.UTC) - timedelta(days=DAYS_TO_FETCH)

    # –°–∫—ñ–ª—å–∫–∏ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ —Ç—Ä–µ–±–∞ –ø—Ä–∏ limit=300 (–∑ –±—É—Ñ–µ—Ä–æ–º)
    pages_needed = ceil(DAYS_TO_FETCH * 1440 / limit) + 100

    records = []  # —à–≤–∏–¥—à–µ –∑–∞ dict+—Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∫–ª—é—á—ñ–≤ –∫–æ–∂–Ω—É —ñ—Ç–µ—Ä–∞—Ü—ñ—é
    cursor = None  # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π ts —ñ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ø–∞—á–∫–∏ (—Ä—É—Ö —É –º–∏–Ω—É–ª–µ)

    try:
        cl = MarketAPI(flag="0", debug=False)

        for page in range(1, pages_needed + 1):
            if page % REFRESH_CLIENT_EVERY == 0:
                try:
                    cl = MarketAPI(flag="0", debug=False)
                    print(f"[INFO] REFRESH_CLIENT_EVERY: –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}.")
                except Exception as e:
                    print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç: {e}")

            kwargs = dict(instId=inst_id, bar=tf, limit=limit)
            if cursor is not None:
                # –†—É—Ö —É –º–∏–Ω—É–ª–µ: after = –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π ts —ñ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ø–∞—á–∫–∏
                kwargs["after"] = str(cursor)

            data = fetch_with_retry(cl, **kwargs)

            if not data:
                print("–î–∞–Ω–∏—Ö –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î. –ó—É–ø–∏–Ω–∫–∞.")
                break

            # –û–±—Ä–æ–±–∫–∞ –ø–∞—á–∫–∏
            hit_time_boundary = False
            min_ts_in_batch = None

            for c in data:
                ts = int(c[0])       # –º—Å
                dt = from_str_ms(c[0])

                if min_ts_in_batch is None or ts < min_ts_in_batch:
                    min_ts_in_batch = ts

                if dt < min_dt:
                    hit_time_boundary = True
                    # –Ω–µ –¥–æ–¥–∞—î–º–æ —Ç–µ, —â–æ —Å—Ç–∞—Ä—ñ—à–µ –∑–∞ –º–µ–∂—É
                    continue

                # –ó–±–∏—Ä–∞—î–º–æ (–¥—É–±–ª—ñ–∫–∞—Ç–∏ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–æ–ø—É—Å—Ç—è—Ç—å—Å—è –ø—Ä–∏—Ä–æ–¥–Ω–æ: ts >= cursor)
                if cursor is None or ts < cursor:
                    records.append({
                        "timestamp_utc": ts,
                        "datetime_utc": dt,      # –∑—Ä—É—á–Ω—ñ—à–µ –∫–æ–Ω–≤–µ—Ä—Ç–Ω—É—Ç–∏ –æ–ø—Ç–æ–º
                        "open": float(c[1]),
                        "high": float(c[2]),
                        "low": float(c[3]),
                        "close": float(c[4]),
                        "volume": float(c[7]),
                    })

            # –û–Ω–æ–≤–ª—é—î–º–æ –∫—É—Ä—Å–æ—Ä
            if min_ts_in_batch is None or (cursor is not None and min_ts_in_batch >= cursor):
                print("–ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –Ω–µ —Ä—É—Ö–∞—î—Ç—å—Å—è –≤ –º–∏–Ω—É–ª–µ. –ó—É–ø–∏–Ω–∫–∞.")
                break
            cursor = min_ts_in_batch

            if hit_time_boundary:
                print(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –º–µ–∂—ñ {min_dt.date()}. –ó—É–ø–∏–Ω–∫–∞.")
                break

            if len(data) < limit:
                print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page} ‚Äî –ø—Ä–∏–π—à–ª–æ –º–µ–Ω—à–µ {limit} —Å–≤—ñ—á–æ–∫.")
                break

            if page % SAFE_SLEEP_EVERY == 0:
                print(f"–°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –æ–±—Ä–æ–±–ª–µ–Ω–∞, –∫–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞...")
                sleep(SAFE_SLEEP_SEC)

        if not records:
            print("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ (–ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç).")
            return

        # –§–æ—Ä–º—É—î–º–æ DataFrame
        df = pd.DataFrame(records)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–∞—Å—É: UTC -> –ö–∏—ó–≤; —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º
        df["datetime"] = pd.to_datetime(df["datetime_utc"], utc=True).dt.tz_convert(kyiv_tz)
        df = df.drop(columns=["datetime_utc"])
        df = df.sort_values(by="datetime", ascending=False)

        # –ö–æ–ª–æ–Ω–∫–∏ —è–∫ —É —Ç–≤–æ—î–º—É —Ñ–∞–π–ª—ñ
        df = df[["timestamp_utc", "datetime", "open", "high", "low", "close", "volume"]]

        ensure_dir(output_file)
        df.to_csv(output_file, index=False)
        print(f"\nüíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(df)} —Å–≤—ñ—á–æ–∫ —É —Ñ–∞–π–ª: {output_file}")

    except KeyboardInterrupt:
        print("–ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º!")
    except Exception as e:
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()