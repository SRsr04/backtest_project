# detect_m15_bos.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import random
from math import ceil
from datetime import datetime, timedelta
from time import sleep

import pytz
import pandas as pd
import numpy as np
from okx.MarketData import MarketAPI

# --- Timezone (Kyiv) ---
try:
    from zoneinfo import ZoneInfo
    kyiv_tz = ZoneInfo('Europe/Kyiv')
except ImportError:
    kyiv_tz = pytz.timezone('Europe/Kyiv')

# --- Config ---
INST_ID = "BTC-USDT-SWAP"
TF = '5m'                 # —Å–≤—ñ—á–∫–∏ –¥–ª—è BOS
LIMIT = 300                # –º–∞–∫—Å–∏–º—É–º —É OKX
DAYS_TO_FETCH = 1826       # —Ä—ñ–≤–Ω–æ 5 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö —Ä–æ–∫—ñ–≤ (–≤–∫–ª—é—á–Ω–æ –∑ 2024)

# –í–∏–≤—ñ–¥
CANDLES_OUTPUT_FILE = "btc/m5_candles.csv"
BOS_OUTPUT_FILE     = "btc/bos_m5.csv"

# –†–µ–π—Ç-–ª—ñ–º—ñ—Ç/—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å
SAFE_SLEEP_EVERY = 50      # –ø–∞—É–∑–∞ –∫–æ–∂–Ω—ñ N –∑–∞–ø–∏—Ç—ñ–≤
SAFE_SLEEP_SEC   = 2
REFRESH_CLIENT_EVERY = 1000
RETRY_MAX  = 6
RETRY_BASE = 2
RETRY_CAP  = 30

# --- Utils ---
def ensure_dir(path: str):
    d = os.path.dirname(path)
    if d:
        os.makedirs(d, exist_ok=True)

def from_str_ms(ms_str: str) -> datetime:
    return datetime.fromtimestamp(int(ms_str) / 1000, tz=pytz.UTC)

def fetch_with_retry(cl, **kwargs):
    """OKX –≤–∏–∫–ª–∏–∫ —ñ–∑ —Ä–µ—Ç—Ä—ñ —Ç–∞ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–º –±–µ–∫–æ—Ñ–æ–º."""
    for attempt in range(1, RETRY_MAX + 1):
        try:
            r = cl.get_history_candlesticks(**kwargs)
            return r.get("data", [])
        except Exception as e:
            delay = min(RETRY_BASE * (2 ** (attempt - 1)), RETRY_CAP)
            delay += random.uniform(0, 0.5 * delay)
            print(f"[WARN] {e}. retry {attempt}/{RETRY_MAX} in {delay:.1f}s...")
            sleep(delay)
            if attempt % 2 == 0:
                try:
                    cl = MarketAPI(flag="0", debug=False)
                    print("[INFO] –ö–ª—ñ—î–Ω—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ.")
                except Exception as e2:
                    print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç: {e2}")
    raise RuntimeError("–í–∏—á–µ—Ä–ø–∞–Ω–æ —Ä–µ—Ç—Ä—ñ –¥–ª—è get_history_candlesticks")

# --- Candlestick downloader (fast) ---
def fetch_candles_from_okx(inst_id: str, tf: str, limit: int, days_to_fetch: int) -> pd.DataFrame:
    print(f"*** OKX {tf} Candles ‚Äì Last {days_to_fetch // 365} Years for {inst_id} ***")

    # –ú–µ–∂–∞ –∑–∞ —á–∞—Å–æ–º (–π–¥–µ–º–æ —É –º–∏–Ω—É–ª–µ, –ø–æ–∫–∏ –Ω–µ –ø–µ—Ä–µ–π–¥–µ–º–æ —Ü—é –¥–∞—Ç—É)
    min_dt = datetime.now(tz=pytz.UTC) - timedelta(days=days_to_fetch)

    # –î–ª—è –æ—Ü—ñ–Ω–∫–∏ –≤–µ—Ä—Ö–Ω—å–æ—ó –º–µ–∂—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫: –±–∞—Ä—ñ–≤/–¥–µ–Ω—å –¥–ª—è TF
    bars_per_day = {
        '1m': 1440, '3m': 480, '5m': 288, '15m': 96, '30m': 48,
        '1H': 24, '2H': 12, '4H': 6, '6H': 4, '12H': 2, '1D': 1
    }.get(tf, 96)  # –¥–µ—Ñ–æ–ª—Ç 96 (15m)

    pages_needed = ceil(days_to_fetch * bars_per_day / limit) + 50  # –Ω–µ–≤–µ–ª–∏–∫–∏–π –±—É—Ñ–µ—Ä

    records = []
    seen_ts = set()
    cursor = None  # —Ä—É—Ö —É –º–∏–Ω—É–ª–µ —á–µ—Ä–µ–∑ after=min_ts –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –ø–∞—á–∫–∏

    cl = MarketAPI(flag="0", debug=False)

    for page in range(1, pages_needed + 1):
        if page % REFRESH_CLIENT_EVERY == 0:
            try:
                cl = MarketAPI(flag="0", debug=False)
                print(f"[INFO] REFRESH_CLIENT_EVERY: –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {page}.")
            except Exception as e:
                print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç: {e}")

        kwargs = dict(instId=inst_id, bar=tf, limit=limit)
        if cursor is not None:
            kwargs["after"] = str(cursor)  # –¥–∞—î —Å—Ç–∞—Ä—ñ—à—ñ —Å–≤—ñ—á–∫–∏

        data = fetch_with_retry(cl, **kwargs)
        if not data:
            print("No more data received. Stopping.")
            break

        min_ts_in_batch = None
        hit_time_boundary = False

        for c in data:
            ts = int(c[0])
            dt = from_str_ms(c[0])

            if min_ts_in_batch is None or ts < min_ts_in_batch:
                min_ts_in_batch = ts

            # –°—Ç–æ–ø –ø–æ —á–∞—Å–æ–≤—ñ–π –º–µ–∂—ñ
            if dt < min_dt:
                hit_time_boundary = True
                continue

            if ts in seen_ts:
                continue
            seen_ts.add(ts)

            records.append({
                'timestamp_utc': ts,
                'datetime_utc': dt,
                'open':  float(c[1]),
                'high':  float(c[2]),
                'low':   float(c[3]),
                'close': float(c[4]),
                'volume': float(c[7]),
            })

        if min_ts_in_batch is None or (cursor is not None and min_ts_in_batch >= cursor):
            print("–ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –Ω–µ —Ä—É—Ö–∞—î—Ç—å—Å—è –≤ –º–∏–Ω—É–ª–µ. –ó—É–ø–∏–Ω–∫–∞.")
            break
        cursor = min_ts_in_batch

        if hit_time_boundary:
            print(f"–î–æ—Å—è–≥–Ω—É—Ç–æ –º–µ–∂—ñ {min_dt.date()}. –ó—É–ø–∏–Ω–∫–∞.")
            break

        if len(data) < limit:
            print(f"Finished fetching data. Received {len(data)} (< {limit}) —É –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–∞—á—Ü—ñ.")
            break

        if page % SAFE_SLEEP_EVERY == 0:
            print(f"Page {page} processed, short pause...")
            sleep(SAFE_SLEEP_SEC)

    if not records:
        print("Fetched 0 candles.")
        return pd.DataFrame()

    df = pd.DataFrame(records)
    print(f"\nFetched {len(df)} candles.")
    return df

# --- BOS detection ---
def detect_bos_based_on_fractals(df: pd.DataFrame) -> list[dict]:
    """
    –í—Ö—ñ–¥: df —ñ–∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏ timestamp_utc, high, low, close.
    –ê–ª–≥–æ—Ä–∏—Ç–º: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ 3-—Å–≤—ñ—á–∫–æ–≤—ñ —Ñ—Ä–∞–∫—Ç–∞–ª–∏; BOS –ø—Ä–∏ –ø—Ä–æ–±–∏—Ç—Ç—ñ —Ä—ñ–≤–Ω—è —Ñ—Ä–∞–∫—Ç–∞–ª–∞,
    –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ high/low, —ñ close.
    """
    # –°–æ—Ä—Ç—É—î–º–æ –∑ –º–∏–Ω—É–ª–æ–≥–æ –≤ –º–∞–π–±—É—Ç–Ω—î
    df = df.sort_values(by='timestamp_utc', ascending=True)
    highs = df['high'].to_numpy(dtype=float)
    lows  = df['low'].to_numpy(dtype=float)
    closes = df['close'].to_numpy(dtype=float)

    timestamps = pd.to_datetime(df['timestamp_utc'], unit='ms', utc=True).to_numpy()
    bos_list = []
    n = len(df)
    if n < 3:
        return bos_list

    for i in range(1, n - 1):
        # Bullish fractal
        if highs[i] > highs[i - 1] and highs[i] > highs[i + 1]:
            level = highs[i]
            mask = (highs[(i+2):] > level) & (closes[(i+2):] > level)
            idx = np.where(mask)[0]
            if idx.size > 0:
                j = idx[0] + i + 2
                bos_list.append({
                    'type': 'bullish',
                    'fract_time': timestamps[i],
                    'bos_time': timestamps[j],
                    'level': float(level),
                    'close': float(closes[j])
                })

        # Bearish fractal
        if lows[i] < lows[i - 1] and lows[i] < lows[i + 1]:
            level = lows[i]
            mask = (lows[(i+2):] < level) & (closes[(i+2):] < level)
            idx = np.where(mask)[0]
            if idx.size > 0:
                j = idx[0] + i + 2
                bos_list.append({
                    'type': 'bearish',
                    'fract_time': timestamps[i],
                    'bos_time': timestamps[j],
                    'level': float(level),
                    'close': float(closes[j])
                })

    return bos_list

# --- Main ---
def main_bos_script():
    print(f"Running BOS detection for {INST_ID} on {TF} over ~{DAYS_TO_FETCH // 365} years.")

    # 1) Download M15 candles fast
    df_candles = fetch_candles_from_okx(INST_ID, TF, LIMIT, DAYS_TO_FETCH)
    if df_candles.empty:
        print("No candlestick data to process. Exiting.")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–∞—Å—É –≤ –ö–∏—ó–≤ + –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∏—Ä–∏—Ö —Å–≤—ñ—á–æ–∫ (–æ–ø—Ü—ñ–π–Ω–æ/—à–≤–∏–¥–∫–æ)
    df_candles["datetime"] = pd.to_datetime(df_candles["datetime_utc"], utc=True).dt.tz_convert(kyiv_tz)
    df_candles = df_candles.drop(columns=["datetime_utc"])
    df_candles = df_candles.sort_values(by="timestamp_utc", ascending=True)
    ensure_dir(CANDLES_OUTPUT_FILE)
    df_candles.to_csv(CANDLES_OUTPUT_FILE, index=False)
    print(f"üíæ Saved {len(df_candles)} M15 candles to: {CANDLES_OUTPUT_FILE}")

    # 2) Detect BOS
    print("\nDetecting BOS...")
    bos_list = detect_bos_based_on_fractals(df_candles)
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(bos_list)} BOS –∑–∞ –ø–µ—Ä—ñ–æ–¥.")

    if not bos_list:
        print("‚ö†Ô∏è BOS –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    bos_df = pd.DataFrame(bos_list)
    bos_df['bos_time']   = pd.to_datetime(bos_df['bos_time'],   utc=True, errors='coerce')
    bos_df['fract_time'] = pd.to_datetime(bos_df['fract_time'], utc=True, errors='coerce')

    bos_df['bos_time_kiev']   = bos_df['bos_time'].dt.tz_convert(kyiv_tz)
    bos_df['fract_time_kiev'] = bos_df['fract_time'].dt.tz_convert(kyiv_tz)

    # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å —ñ –ø–æ—Ä—è–¥–æ–∫
    bos_df = bos_df.drop_duplicates(subset=['bos_time','fract_time','type','level'], keep='first')
    bos_df = bos_df.sort_values(by='bos_time', ascending=False)

    # –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π –ø—Ä—ñ–≤'—é
    def format_bos_row(row):
        return (f"{row['bos_time_kiev'].strftime('%d.%m %H:%M')} | {row['type']} BOS | "
                f"fractal @ {row['fract_time_kiev'].strftime('%H:%M')} | "
                f"level: {row['level']:.2f}, close: {row['close']:.2f}")

    bos_df['formatted'] = bos_df.apply(format_bos_row, axis=1)

    output_columns = [
        'bos_time', 'bos_time_kiev', 'type',
        'fract_time', 'fract_time_kiev',
        'level', 'close'
    ]
    ensure_dir(BOS_OUTPUT_FILE)
    bos_df[output_columns].to_csv(BOS_OUTPUT_FILE, index=False)

    print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {len(bos_df)} BOS —É —Ñ–∞–π–ª {BOS_OUTPUT_FILE}.\n")
    print("–ü—Ä–∏–∫–ª–∞–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 BOS:")
    for line in bos_df['formatted'].head(10):
        print(line)

if __name__ == "__main__":
    main_bos_script()